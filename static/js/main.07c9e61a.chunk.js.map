{"version":3,"sources":["useForm.js","App.js","serviceWorker.js","index.js"],"names":["useForm","callback","useState","go","mo","ms","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","name","value","App","Container","Form","Row","Col","FormGroup","Label","for","Input","type","id","onChange","disabled","seconds","date","Date","setSeconds","toISOString","substr","secondsToHours","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o3BAEA,IA6CeA,EA7CC,SAAAC,GAAa,IAAD,EACEC,mBAAS,CACnCC,GAAI,GACJC,GAAI,IACJC,GAAI,IAJoB,mBACnBC,EADmB,KACXC,EADW,KAuC1B,MAAO,CACLC,aAlCmB,SAAAC,GACfA,GACFA,EAAMC,kBAiCRC,kBA9BwB,SAAAF,GAGxB,OAFAA,EAAMG,UAEEH,EAAMI,OAAOC,MACnB,IAAK,KACHP,GAAU,SAAAD,GAAM,kBACXA,GADW,mBAEbG,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,OAFpB,mBAGW,IAArBN,EAAMI,OAAOE,OAHH,OAKhB,MAEF,IAAK,KACHR,GAAU,SAAAD,GAAM,kBACXA,GADW,mBAEbG,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,OAFpB,mBAGVN,EAAMI,OAAOE,MAAQ,KAHX,OAKhB,MAEF,QACER,GAAU,SAAAD,GAAM,YACXA,EADW,eAEbG,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,aAQxCT,WCiDWU,EAzFH,WAAO,IAAD,EACsBhB,IAA9BM,EADQ,EACRA,OAAQK,EADA,EACAA,kBAYhB,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,0BACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLX,KAAK,KACLY,GAAG,KACHC,SAAUhB,EACVI,MAAOT,EAAOH,OAIpB,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,0BACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLX,KAAK,KACLY,GAAG,KACHC,SAAUhB,EACVI,MAAOT,EAAOF,QAMtB,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,0CACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLX,KAAK,KACLY,GAAG,KACHC,SAAUhB,EACVI,MAAOT,EAAOD,QAMtB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,qCACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLX,KAAK,KACLY,GAAG,KACHE,UAAQ,EACRb,MAAOT,EAAOD,IAAMC,EAAOF,GAAKE,EAAOD,OAI7C,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,MAAX,qCACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLX,KAAK,KACLY,GAAG,KACHE,UAAQ,EACRb,MAAOT,EAAOD,IA5EL,SAAAwB,GACrB,IAAKA,EACH,OAAO,EAET,IAAMC,EAAO,IAAIC,KAAK,MAGtB,OAFAD,EAAKE,WAAWH,GAETC,EAAKG,cAAcC,OAAO,GAAI,GAqELC,CAAe7B,EAAOF,GAAKE,EAAOD,YCvElD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.07c9e61a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst useForm = callback => {\r\n  const [inputs, setInputs] = useState({\r\n    go: 30,\r\n    mo: 30000,\r\n    ms: 5\r\n  });\r\n  const handleSubmit = event => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n  const handleInputChange = event => {\r\n    event.persist();\r\n\r\n    switch (event.target.name) {\r\n      case 'go':\r\n        setInputs(inputs => ({\r\n          ...inputs,\r\n          [event.target.name]: event.target.value,\r\n          mo: event.target.value * 1000\r\n        }));\r\n        break;\r\n\r\n      case 'mo':\r\n        setInputs(inputs => ({\r\n          ...inputs,\r\n          [event.target.name]: event.target.value,\r\n          go: event.target.value / 1000\r\n        }));\r\n        break;\r\n\r\n      default:\r\n        setInputs(inputs => ({\r\n          ...inputs,\r\n          [event.target.name]: event.target.value\r\n        }));\r\n        break;\r\n    }\r\n  };\r\n  return {\r\n    handleSubmit,\r\n    handleInputChange,\r\n    inputs\r\n  };\r\n};\r\nexport default useForm;\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport useForm from \"./useForm\";\r\n\r\nconst App = () => {\r\n  const { inputs, handleInputChange } = useForm();\r\n\r\n  const secondsToHours = seconds => {\r\n    if (!seconds) {\r\n      return 0;\r\n    }\r\n    const date = new Date(null);\r\n    date.setSeconds(seconds);\r\n\r\n    return date.toISOString().substr(11, 8);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form>\r\n        <Row>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"go\">Taille du fichier (Go)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                name=\"go\"\r\n                id=\"go\"\r\n                onChange={handleInputChange}\r\n                value={inputs.go}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"mo\">Taille du fichier (Mo)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                name=\"mo\"\r\n                id=\"mo\"\r\n                onChange={handleInputChange}\r\n                value={inputs.mo}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"ms\">Vitesse de téléchargement (Mo/s)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                name=\"ms\"\r\n                id=\"ms\"\r\n                onChange={handleInputChange}\r\n                value={inputs.ms}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"ds\">Temps de téléchargement (s)</Label>\r\n              <Input\r\n                type=\"number\"\r\n                name=\"ds\"\r\n                id=\"ds\"\r\n                disabled\r\n                value={inputs.ms && inputs.mo / inputs.ms}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col>\r\n            <FormGroup>\r\n              <Label for=\"dh\">Temps de téléchargement (h)</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"dh\"\r\n                id=\"dh\"\r\n                disabled\r\n                value={inputs.ms && secondsToHours(inputs.mo / inputs.ms)}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}